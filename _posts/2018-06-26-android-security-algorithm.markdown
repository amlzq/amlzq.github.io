---
layout: post
title:  "Android安全算法"
date:   2018-06-26 00:00 +0800
categories: jekyll update
---

### RSA
```
<p>
 * 关于加密填充方式：
 * android系统默认的RSA实现是"RSA/None/NoPadding"，而标准JDK默认的RSA实现是"RSA/None/PKCS1Padding"
 * <p>
 * 关于分段加密：
 * RSA算法规定：待加密的字节数不能超过密钥的长度值除以 8 再减去 11（即：KeySize / 8 - 11）,
 * 而加密后得到密文的字节数,正好是密钥的长度值除以 8（即：KeySize / 8）
 * <p>
 * RSA加密原理概述
 * RSA的安全性依赖于大数的分解，公钥和私钥都是两个大素数（大于100的十进制位）的函数。
 * 据猜测，从一个密钥和密文推断出明文的难度等同于分解两个大素数的积
 * ===================================================================
 * 密钥的产生：
 * 1.选择两个大素数 p,q ,计算 n=p*q;
 * 2.随机选择加密密钥 e ,要求 e 和 (p-1)*(q-1)互质
 * 3.利用 Euclid 算法计算解密密钥 d , 使其满足 e*d = 1(mod(p-1)*(q-1)) (其中 n,d 也要互质)
 * 4:至此得出公钥为 (n,e) 私钥为 (n,d)
 * ===================================================================
 * 加解密方法：
 * 1.首先将要加密的信息m(二进制表示)分成等长的数据块
 * m1,m2,...,mi 块长 s(尽可能大 2^s<n)
 * 2:对应的密文是： ci = mi^e(mod n)
 * 3:解密时作如下计算： mi = ci^d(mod n)
 * ===================================================================
 * RSA速度
 * 由于进行的都是大数计算，使得RSA最快的情况也比DES慢上100倍，无论是软件还是硬件实现。
 * 速度一直是RSA的缺陷。一般来说只用于少量数据加密。
```

---
### 参考文章
* [文字说明][文字说明]
---
[文字说明]: 链接